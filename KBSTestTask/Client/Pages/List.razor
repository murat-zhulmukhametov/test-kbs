@page "/list"

@using KBSTestTask.Shared
@using Microsoft.AspNetCore.SignalR.Client
 
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject HubConnection hubConnection

<h3>Список городов</h3>

<p>
    <a href="/create">Добавить город</a>
</p>

@if (cities == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Название</th>
                <th>Численность</th>
                <th>Дата основания</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td><a href='/edit/@city.Id'>@city.Name</a></td>
                    <td>@city.CitizensCount</td>
                    <td>@city.FoundationDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <input type="button" value="Удалить"  @onclick="@(e => Delete(city.Id))" class="btn btn-primary" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    IList<City> cities;

    protected override async Task OnInitializedAsync()
    {
        hubConnection.On("ListHub", (List<City> list) =>
        {
            cities = list;
            StateHasChanged();
        });


        hubConnection.On("Created", (City city) =>
        {
            cities = cities.Append(city).ToList();
            StateHasChanged();
        });

        hubConnection.On("Updated", (City city) =>
        {
            var c = cities.FirstOrDefault(x => x.Id == city.Id);

            if (c == null) return;

            c.Name = city.Name;
            c.CitizensCount = city.CitizensCount;
            c.FoundationDate = city.FoundationDate;

            StateHasChanged();
        });

        hubConnection.On("Deleted", (Guid id) =>
        {
            DeleteItem(id);
            StateHasChanged();
        });

        hubConnection.On("Error", (string message) =>
        {
            js.InvokeVoidAsync("alert", message);
            StateHasChanged();
        });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();
        }

        await hubConnection.SendAsync("List");
    }

    protected async Task Delete(Guid id)
    {
        await hubConnection.SendAsync("Delete", id);
        DeleteItem(id);
        await js.InvokeVoidAsync("alert", $"Удалено.");
    }

    private void DeleteItem(Guid id)
    {
        var c = cities.FirstOrDefault(x => x.Id == id);
        cities.Remove(c);
        StateHasChanged();
    }

}  